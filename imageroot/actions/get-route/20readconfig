#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import json
import os
import agent
import sys
import re
import urllib.request

# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)
module = data['instance']
route = {}

api_path = os.environ["API_PATH"]
try:
    # Get the http route from the API
    with urllib.request.urlopen(f'http://127.0.0.1/{api_path}/api/http/routers/{module}-https@redis') as res:
        traefik_https_route = json.load(res)
    # Get the https route from the API
    with urllib.request.urlopen(f'http://127.0.0.1/{api_path}/api/http/routers/{module}-http@redis') as res:
        traefik_http_route = json.load(res)

    service_name = traefik_https_route['service']
    # Get the service from the API
    with urllib.request.urlopen(f'http://127.0.0.1/{api_path}/api/http/services/{service_name}@redis') as res:
        service = json.load(res)

    route['instance'] = data['instance']

    # Extract the hostname from the rule of the router
    r =  re.match(r"^.*Host\(`(.*?)`\).*$", traefik_https_route['rule'])
    if r:
        route['host'] = r.group(1)

    # Extract the path from the rule of the router
    r =  re.match(r"^.*Path\(`(.*?)`\).*$", traefik_https_route['rule'])
    if r:
        route['path'] = r.group(1)

    # Get the target URL from the service
    route['url'] = service['loadBalancer']['servers'][0]['url']

    # Check if the certificate is retrieved automatically
    route['lets_encrypt'] = True if traefik_https_route['tls'].get("certResolver") else False

    middlewares = traefik_http_route.get("middlewares")

    # Check if redirect http to https is enabled
    route['http2https'] = True if middlewares and "http2https-redirectscheme@redis" in middlewares else False

    # Check if the path is striped from the request
    if route.get("path"):
        route['strip_prefix'] = True if middlewares and f'{module}-stripprefix@redis' in middlewares else False

except urllib.error.HTTPError as e:
    if e.code == 404:
        # If the route is not found, return an empty JSON object
        pass

except urllib.error.URLError as e:
    raise Exception(f'Error reaching traefik daemon: {e.reason}')

json.dump(route, fp=sys.stdout)
